시나리오

[1] 스프링의 구조를 알아야하는 이유

1. 왜 스프링의 구조를 알아야 하는가?
  -  상대방의 업무 파악을 통해 원활한 협업 가능

스프링의 구조를 파악 함으로써 프론트엔드 입장에서 서버에서 데이터를 넘겨 받을때 어떤식으로 넘어오는지 알 수가 있음
-> 상대방의 입장을 앎으로써 원활한 협업 가능

(데이터가 넘어오는 구조 도식화)


3. 백엔드의 역할
  - 요청 받은 데이터를 서버에서 처리 후 돌려주는 것이 기본

웹서버가 필요한 이유 : 웹서버에서 정적 컨텐츠만 처리하도록 기능 분배를 해서 WAS의 부담을 줄여준다.
WAS가 필요한 이유 : 요청에 맞는 데이터를 DB에서 가져오고 가공을 통해 결과를 제공하면 효율적으로 사용

WAS로 웹서버의 역할을 다 처리할 수 있나?
WAS는 DB조회, 다양한 로직 처리에 집중해야한다. 단순한 정적컨텐츠는 웹서버에 맡겨서 부하를 줄여야된다.

[2] 스프링의 구조

2. MVC 패턴 도식화
  - 리딩 메시지

 서블릿은 무엇인가?

서블릿은 웹 프로그래밍에서 클라이언트 요청을 처리하고

처리 결과를 클라이언트에 전송하는 기술.

프리젠테이션 계층은 말 그대로 사용자 인터페이스
퍼시스턴스 계층(Persistence Layer)이란 쉽게 말해서 DB와 연결하는 부분을 말한다.<퍼시스턴스(Persistence)라는 단어 뜻 그대로 '영속성'을 가지는 DB와 연결을 하는 지점을 의미한다!>
MyBatis, Hibernate 등을 퍼시스턴스 프레임워크라고 부르는데 DB랑 연동을 시키는 기능을 하기 때문이다!
MVC 패턴 내부에서 Model 계층은 비즈니스 계층과 퍼시스턴스 계층으로 구성된다고 할 수 있다.(Model Layer = Business Layer + Persistence Layer)
사실 비즈니스 계층에서 DB랑 연결을 하는 작업을 전부 처리해도 상관이 없지만 굳이 퍼시스턴스 계층을 따로 두는 이유는 개발자가 편하기 위해서다!

[3] 스프링 작동 원리

3. 컨트롤러 

우리는 특정 uri로 요청을 보내면 Controller에서 어떠한 방식으로 처리할지 정의를 한다.
이때 들어온 요청을 특정 메서드와 매핑하기 위해 사용하는 것이 @RequestMapping